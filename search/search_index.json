{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Trace Tool. Version 0.11.0","text":"<p>ChipScope is an IP core provided by Xilinx/AMD for many of their series FPGA chips. When installed it can capture analog and digital signals for any specific net/wire. In that, conceptually, it is not dissimilar from Oscilloscope. The difference being that it can provide access to signals inside the chip which are not routed out to chip pads and pins. In the lab it is commonly triggered through Vivado IDE which produces a csv file with each column holding a trace, column name being name of trace. While generated file is technically a csv file its interpretation by common tools like Excel and others is challenging as second row typically contains radix information for each column such as HEX, SIGNED, UNSIGNED and so on. This is intended for correct interpretation of numerical values in each trace column. Regardless of that, Excel is often use to plot and analyze traces. This is very slow and error-prone. Additionally, Vivado will normally override the same csv file making it difficult to track history of the traces, i.e. being able to see how any given trace looked like before and after some change to the Verilog code was applied.</p> <p>\"Trace Tool\" (TT), is an application that addresses above-mentioned issues and also provides additional functionality for annotating traces, creating trace views for presentation and analysis, tracking history of any given trace and many more.</p>"},{"location":"basic_usage/","title":"Basic Usage","text":""},{"location":"basic_usage/#creating-a-project","title":"Creating a project","text":"<p>To start Trace Tool application open PowerShell/Terminal window, type <code>tt</code> and press <code>[Enter]</code>. When you start it for the very first time no project is opened, and you should see a mostly blank window.</p> <p></p> <p>To start tracking and annotating traces from the ChipScope generated csv file you will first need to create a project by going to menu <code>File</code> -&gt; <code>New Project</code>.</p> <p></p> <p>Give project a name and select csv file with ChipScope generated traces to associate with.</p> <p></p> <p>Once created Trace Tool main window should look like so.</p> <p></p> <p>In the Active Traces tab you can see all traces loaded from the source csv file. At the bottom you can see name of the opened project and a csv file that it is tracking. Farther to the right you can see latest version of the loaded traces. When project is created a project directory is created and populated with various files including copy of each trace. This is what allows Trace Tool to keep track of the versions. When csv file is changed, usually by being overridden by Vivado, Trace Tool can make a new copy of traces into the project directory while keeping all previous versions.</p>"},{"location":"basic_usage/#viewing-traces","title":"Viewing Traces","text":"<p>Double-click on any of the trace to open a window with trace plot.</p> <p></p> <p>You can also select multiple traces and the right-mouse click to bring context menu to plot multiple traces in one window.</p> <p></p> <p></p>"},{"location":"basic_usage/#organizing-traces","title":"Organizing traces","text":"<p>Not every trace present in the csv file is going to be relevant to your work. You can right mouse click on any trace to bring up context menu and select option <code>Mark as inactive</code>. This will move selected trace to Inactive Traces tab.</p> <p></p> <p>This trace will then be removed from Active Traces tab and be moved into Inactive Traces one.</p> <p></p> <p>There is nothing special about traces in the Inactive Traces tab. You can still plot them by double-clicking on any trace. It is there simply to help user to organize traces relevant to their work.</p> <p>Traces from Inactive Traces tab can be brought back into Active Trace tab by selecting <code>Mark as active</code> from their context menu.</p> <p></p>"},{"location":"basic_usage/#trace-labels","title":"Trace labels","text":"<p>Traces are identified by their names or labels. Trace name is column name in the source csv file and  cannot be changed by the user. Trace label is another string identifying trace and it can be changed by the user. Active Traces and Inactive Traces tabs shows trace labels which at the beginning when project is created  are the same as trace names. To change trace label right mouse click on any trace and click on <code>Rename trace label</code>.</p> <p></p> <p>This will open a dialog allowing you change trace label.</p>"},{"location":"basic_usage/#reloading-trace-data-on-source-csv-file-change","title":"Reloading trace data on source csv file change","text":"<p>By default, Trace Tool will watch csv file in the opened project for changes and prompt user to reload traces  from changed source csv file. </p> <p></p> <p>This can be changed by going to <code>File</code> -&gt; <code>Settings</code> menu and  toggling \"Watch source files (csv) for changes and notify user.\" checkbox.</p> <p></p> <p>If you accept to reload traces new version trace data will be copied into the project and int the right lower corner  of the main window you will see that latest version changes from <code>#1</code> to <code>#2</code>.</p> <p></p> <p>If you disable source file watch in the settings you can explicitly request to reload traces by going to  menu <code>File</code> -&gt; <code>Reload traces from source</code>.</p>"},{"location":"basic_usage/#plotting-latest-and-previous-trace-version","title":"Plotting latest and previous trace version","text":"<p>When project tracks more than one version of the trace you can request to plot latest and previous version of the trace by going to the trace context menu and selecting <code>Plot latest and previous version of the trace</code>.</p> <p></p> <p>This should open plot window that has both trace versions and their versions listed in the right upper corner.</p> <p></p>"},{"location":"basic_usage/#changing-time-step","title":"Changing time step","text":"<p>Source csv file typically will not contain any information about sampling rate (i.e. time step). Thus, by default when  project is created time step it automatically set to 1 ms. You can change that by going to the Project tab and  clicking on <code>Change Value</code> button for implied time step.</p> <p></p> <p>Often you will know sampling rate instead. In that case you can click on <code>Derive From Sampling Frequency</code>.</p> <p></p>"},{"location":"chipscope_file_format/","title":"Chipscope csv file format","text":"<p>Chipscope generated csv file has a specific structure that look like so</p> <pre><code>Sample in Buffer,Sample in Window,TRIGGER,aCore/Gen/foo[15:0],aCore/Gen/xyz[15:0]\nRadix - UNSIGNED,UNSIGNED,UNSIGNED,SIGNED,SIGNED\n0,0,0,83,39417\n1,1,0,96,394A4\n2,2,0,102,39410\n...\n</code></pre> <p>Or better formatted:</p> Sample in Buffer Sample in Window TRIGGER aCore/Gen/foo[15:0] aCore/Gen/xyz[15:0] Radix - UNSIGNED UNSIGNED UNSIGNED SIGNED HEX 0 0 0 83 39417 1 1 0 96 394A7 2 2 0 102 39410 <p>First row contains column names which are trace names. Second row contains radix for subsequent numeric values. Starting from the third row is actual trace data.</p>"},{"location":"derivative_traces/","title":"Derivative Traces","text":"<p>Many of the traces reported by the ChipScope will not be really independent but connected in some way.  For example one trace might be voltage and another one current. Naturally multiplying these two will  give value of Power. Sum of traces could refer to sum of group of currents of voltages on voltage divider. Difference could refer to error deviation from some ideal value and so on.</p> <p>Derivative trace allows you to create a trace that is an application of function to other \"real\" traces. To create a derivative trace go to menu <code>File</code> -&gt; <code>Create Derivative Trace</code>. This will open a dialog that  allows one to create a new derivative trace.</p> <p></p> <p>In the tabs showing traces derivative trace will appear in red color and unlike normal traces they can be deleted or modified.</p> <p></p> <p>Traces can be derived using following functions: </p> <ul> <li>Add and Multiply that take 2 or more traces.</li> <li>Divide and Subtract that take exactly two traces.</li> <li>Lowpass Filter which takes exactly one source trace. </li> </ul> <p>Note that dividing two traces might fail if divisor is 0 at any point in the trace and so such trace might not  be plottable.</p> <p>Derivative traces can themselves be used as source traces for new derivative traces. This makes sense for example  if you traces <code>I [out]</code> and <code>V [out]</code> which are noisy, and you want to plot power based on these two traces to which  lowpass filter has been applied. To that end, for example, you create two derivative traces <code>I [clean]</code>  and <code>V [clean]</code> with lowpass filter applied with cutoff frequency 0.5 MHz. And then create derivative  trace <code>Power [clean]</code> which is a <code>I [clean]</code> * <code>V [clean]</code>.</p>"},{"location":"derivative_traces/#lowpass-filter","title":"Lowpass Filter","text":"<p>When specifying lowpass filter you must provide cutoff frequency with physical unit such as MHz, KHz and so on.</p> <p></p>"},{"location":"installation/","title":"Installation","text":"<p>Trace Tool is written in pure python 3.13 and can be installed on Windows, Mac or Linux. Snippets below address Windows installation.</p> <p>Open PowerShell window and install uv (application for managing python and python based applications). You can skip this step if <code>uv</code> is already installed.</p> <pre><code>winget install --id=astral-sh.uv  -e\n</code></pre> <p>Once <code>uv</code> is installed run</p> <pre><code>uv tool install --cache-dir .cache -p 3.13.1 --force git+https://github.com/priimak/tt.git@release\n</code></pre> <p>This will install latest release version of Trace Tool (executable <code>tt.exe</code>).</p> <p>If newer version of Trace Tool is available then you can upgrade your previously installed version by running following command in PowerShell window.</p> <pre><code>uv tool upgrade tt\n</code></pre>"},{"location":"trace_settings/","title":"Trace Settings","text":"<p>Default appearance of trace plots is useful but basic. You can modify what and how trace is plotted by clicking  on <code>Trace Config</code> icon in trace window.</p> <p></p> <p>which opens trace config dialog</p> <p></p>"},{"location":"trace_settings/#basic-settings","title":"Basic settings","text":"<ul> <li>Figure title - text that will appear right above the trace plot</li> <li>Show Legend - show or no-show legend associated with this trace. If enabled legend text is a trace label    optionally followed values of stat. functions (see below). If multiple traces are rendered, then label will    also include trace version number.</li> <li>Legend Location - position in the plot where legend will be placed. Default is \"best\" which imply automatic legend    placement on the plot.</li> <li>X-Axis Label - label to be shown on the x-axis. Note that if set, then time unit (as configured in the     Project tab) will also be appended to this label.</li> <li>Y-Axis Label - label to be shown on the y-axis.</li> <li>Show Grid - is grid to be shown in this plot.</li> </ul>"},{"location":"trace_settings/#linear-transform","title":"Linear transform","text":"<p>Trace data will typically be an integer representing fraction of some voltage or current range. Hence, to display  correct physical value on the y-axis you will need to change scale and offset in linear transform  function Y' = scale * Y + offset, which by default are set to 1 and 0 respectively. </p> <p></p>"},{"location":"trace_settings/#overlay-filtered-signal","title":"Overlay filtered signal","text":"<p>If the trace captures analog signal it will most likely be noisy, and you may want to apply some smoothing filter.  These new smoothed signal will be overlayed on top of the existing \"raw\" trace. Two filters are  available: Savitsky-Golay and digital lowpass filter using  Butterworth function.</p> <p></p>"},{"location":"trace_settings/#savitsky-golay-filter","title":"Savitsky-Golay filter","text":"<p>If you pick Savitsky-Golay filter, then savgol  function from <code>SciPy</code> library will be used for filtering, with <code>polyorder</code> (the order of the polynomial used to  fit the samples) set to 2 and configurable <code>window_length</code> (the length of the filter window). You have two ways to  set <code>window_length</code>.</p> <p></p> <p>You can either set it as a percentage of total number of data points (default is 3%) by appending percent sign in  the window text input field, or you can specify absolute number of datapoints in filter window by simply writing a  number without percent sign.</p>"},{"location":"trace_settings/#lowpass-filter","title":"Lowpass filter","text":"<p>If you pick Lowpass filter, then you have to specify cutoff frequency and must provide physical unit (MHz, KHz, etc.)  for the frequency value in the Cutoff Frequency text input field.</p> <p></p>"},{"location":"trace_settings/#stat-functions","title":"Stat. functions","text":"<p>Basic statistical functions (min, max, range, mean and standard deviation) can be added to be computed  and displayed with the trace legend. This means that to see them you need to toggle Show Legend checkbox above.</p> <p></p>"},{"location":"views/","title":"Views","text":"<p>Views allows user to create plots consisting of multiple subplots arranged in rectangular grid with  specific traces in each subplot. To create a view go to <code>File</code> -&gt; <code>Create View</code> which will bring up  following dialog.</p> <p></p> <p>Here we are creating view called <code>Power</code> consisting of two subplots each located on their row.  This will create a view, open it and its config dialog.</p> <p></p> <p>At the top you have text dialog containing view title to be displayed in view window and below two  rectangular boxes representing subplots. You can click on them to bring up subplot configuration dialog.</p> <p></p> <ul> <li>Left Y-Axis Label - label to be shown on the left y-axis. Note that even if set it will not appear if    there are no traces that use left y-axis.</li> <li>Right Y-Axis Label - label to be shown on the right y-axis. Note that even if set it will not appear    if there are no traces that use left y-axis.</li> <li>X-Axis Label - label to be shown on the x-axis. Note that if set, then time unit (as configured    in the Project tab) will also be appended to this label.</li> <li>Show Grid - is grid to be shown in this subplot.</li> <li>Legends Location - where to place legends on this subplot if there are any.   Set to [None] if you do not want to legends to be shown at all. Note that even   if \"Legends Location\" is set to something which is not [None], legends will be shown only if   there is at least one trace (configured below) that indicates that it is to be accompanied by a legend.</li> </ul>"},{"location":"views/#adding-traces","title":"Adding traces","text":"<p>To add traces to a subplot click on <code>[ + ]</code> button at the lower section of the dialog and pick trace that you  want to add. For example, we will pick trace <code>Power [raw]</code> which is a derivative  trace (multiplication of two unfiltered traces).</p> <p></p> <p>And in another subplot we add clean/filtered version of power trace.</p> <p></p> <p>For each trace following elements are present</p> <ul> <li>Trace - trace label.</li> <li>Version - trace version to be shown. -1 always refers to the latest version.</li> <li>Color - color for this trace. Setting to [auto] will ensure no color collisions between multiple traces.</li> <li>On Axis - left or right axis. Use different axis when you have two traces with wildly different    scales on y-axis.</li> <li>Show Overlay - show or no-show overlay signal if trace is configured to produce one. For example low pass    filtered signal. Note that overlay needs to be defined in the config for this trace.</li> <li>Show Legends - show or no-show legends associated with this trace. Global   Legends Location value (see above) could suppress overall display of legends for   this subplot if it is set to [None]. Note that if trace is configured to compute basic   statistics (for example mean or standard deviation values), that statistic will show in the   legends for the trace. Hence, if you want to see those stat. values you will need to   enable showing legends.</li> </ul> <p>When subplot settings dialog is closed View config dialog will show which traces and their versions are in each subplot</p> <p></p> <p>When you close view config dialog, window displaying the view will be updated. </p> <p>You can modify existing view by clicking on <code>View Config</code> icon in the right upper corner which will tack you back  to the view config dialog.</p> <p></p>"}]}